Version control refers to the systems and process of tracking changes to a project, i.e. different "versions" of the project. Specifically, most version control systems track details such as what files or sections of files were added, deleted, or updated, who made those changes, the reasong they gave for making those changes, and in what order they were made. This allows for solving a variety of problems that could arise, mostly surrounding unwanted or broken changes. Without some means of version control, old versions are lost after a change is made. If this change causes the project to no longer work, significant effort could therefore be required to fix it while, with version controlled software, the specific changes made can be identified, allowing easy isolation of the problematic changes and the ability to completely undo them if needed. It also allows you to reference old versions if there was something you needed to know that was included in an old version but has since been removed. This simplest form of "version" control that most people know is use the "undo" and "redo" buttons when editing a file. Hitting undo allows you to correct mistakes or see text that you since deleted but might want to reference again. Version control also helps reconcile two overlapping changes from the same version that need to be merged together as well as manage multiple parallel versions of the software.
Generally version control is managed by a version control system that automatically tracks changes and who submitted them but, to include the reason for the change, they usaually require the developer to manually add an explanation. With Git, this is done when "committing" a change (or officially creating a version) using the `git commit` command. A `-m` argument can be appended to the command followed by a string containing the explanation (`git commit -m "Explanation goes here."`) or, if the argument is not used, the command will open a prompt to type the message.
An example of using version control in software could be that a team is working on a project for their company and an inexperienced developer mistakenly makes a change without properly testing it first, causing a necessary database to become inaccessible. The team can then temporarily revert the change, allowing the database to be reachable again in the meantime, and then review the erroneous changes to fix the issue without digging through the entire project for the problem before re-applying a fixed version of the changes.